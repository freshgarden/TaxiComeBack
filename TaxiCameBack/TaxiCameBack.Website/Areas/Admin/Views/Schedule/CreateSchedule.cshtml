@model TaxiCameBack.Website.Areas.Admin.Models.ScheduleViewModel

@{
    ViewBag.Title = "Creat Schedule";
}

@section AdminHeader
{
    <link href="@Url.Content("~/Content/jquery-ui-1.9.2.custom.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/jquery-ui-1.9.2.custom.min.js")"></script>
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?libraries=places&sensor=false&key=AIzaSyAjnlRqvU0vljMnlPB7Y6gmBAUk4ShnAXQ"></script>
    <script>
        var source, destination;
        var startPointPlace = null;
        var endPointPlace = null;
        var origin_place_id = null;
        var destination_place_id = null;
        var directionsDisplay = new google.maps.DirectionsRenderer;
        var directionsService = new google.maps.DirectionsService();
        travel_mode = google.maps.TravelMode.DRIVING
        google.maps.event.addDomListener(window, 'load', function () {
            var options = {
                componentRestrictions: { country: 'vn' }//Vietnam only
            };
            var startPoint = new google.maps.places.Autocomplete(document.getElementById('BeginLocation'), options);
            startPoint.addListener('place_changed', function () {
                startPointPlace = startPoint.getPlace();
                if (!startPointPlace.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }
                expandViewportToFitPlace(map, startPointPlace);

                // If the place has a geometry, store its place ID and route if we have
                // the other place ID
                origin_place_id = startPointPlace.place_id;
                route(origin_place_id, destination_place_id, travel_mode,
                      directionsService, directionsDisplay);
            });
            var endPoint = new google.maps.places.Autocomplete(document.getElementById('EndLocation'), options);
           endPoint.addListener('place_changed', function () {
               endPointPlace = endPoint.getPlace();
                if (!endPointPlace.geometry) {
                    window.alert("Autocomplete's returned place contains no geometry");
                    return;
                }
                expandViewportToFitPlace(map, endPointPlace);

                // If the place has a geometry, store its place ID and route if we have
                // the other place ID
                destination_place_id = endPointPlace.place_id;
                route(origin_place_id, destination_place_id, travel_mode,
                      directionsService, directionsDisplay);
            });
            directionsDisplay = new google.maps.DirectionsRenderer({ 'draggable': true });
            var hanoi = new google.maps.LatLng(21.022736, 105.8019441);
            var mapOptions = {
                zoom: 7,
                center: hanoi
            };
            map = new google.maps.Map(document.getElementById('dvMap'), mapOptions);
            directionsDisplay.setMap(map);
        });
        function route(origin_place_id, destination_place_id, travel_mode,
                           directionsService, directionsDisplay) {
            if (!origin_place_id || !destination_place_id) {
                return;
            }
            directionsService.route({
                origin: { 'placeId': origin_place_id },
                destination: { 'placeId': destination_place_id },
                travelMode: travel_mode
            }, function (response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Không thể tìm đường!');
                }
            });
        }
        function expandViewportToFitPlace(map, place) {
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }
        }
        $(function () {
            $('#form').each(function () {
                $('input').keypress(function (e) {
                    // Enter pressed?
                    if (e.which == 10 || e.which == 13) {
                        GetRoute();
                    }
                });

                $('input[type=submit]').hide();
            });
            $("#StartDate").datepicker({
                dateFormat: 'dd/mm/yy',
                minDate: 0
            });
        });


        function GetRoute() {

            //        directionsDisplay.setPanel(document.getElementById('dvPanel'));

            //*********DIRECTIONS AND ROUTE**********************//
            source = document.getElementById("BeginLocation").value;
            destination = document.getElementById("EndLocation").value;

            var request = {
                origin: source,
                destination: destination,
                travelMode: google.maps.TravelMode.DRIVING
            };
            directionsService.route(request, function (response, status) {
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                    SetScheduleGeolocation(response);
                }
            });
        }

        function SetScheduleGeolocation(response) {
            var rleg = response.routes[0].legs[0];
            var wp = response.routes[0].overview_path;
            window.vm.addScheduleGeolocation([rleg.start_location.lat(), rleg.start_location.lng()]);
            for (var i = 0; i < wp.length; i++) {
                window.vm.addScheduleGeolocation([wp[i].lat(), wp[i].lng()]);
            }
            window.vm.addScheduleGeolocation([rleg.end_location.lat(), rleg.end_location.lng()]);
        }


    </script>
}

<!-- Content Header (Page header) -->
<section class="content-header">
    <h1>
        @ViewBag.Title
    </h1>
    <ol class="breadcrumb">
        <li><a href="#"><i class="fa fa-dashboard"></i> Home</a></li>
        <li class="active">@ViewBag.Title</li>
    </ol>
</section>
<!-- Main content -->
<section class="content">
    <!-- Info boxes -->
    <div class="row">
        <div class="col-md-4">
            <div class="box">
                <div class="box-header with-border">
                </div>
                    @using (Html.BeginForm("CreateSchedule", "Schedule", FormMethod.Post, new { onkeydown = "return event.keyCode!=13" }))
                    {
                        <div class="box-body">
                            @Html.ValidationSummary(false)
                            @Html.AntiForgeryToken()
                            @Html.Partial("_ScheduleField")
                        </div>
                        <div class="box-footer">
                            <input type="submit" class="btn btn-primary" value="Create" />
                        </div>
                    }
                    <hr />
                    
            </div>
        </div>
        <div class="col-md-8">
            <div class="box">
                <div class="box-body no-padding">
                    <div id="dvMap" style="height: 450px;"></div>
                </div>
            </div>
            
        </div>
    </div>
    <!-- /.row -->
</section>
<!-- /.content -->
